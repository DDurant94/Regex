1. Python Regular Expressions Mastery
Task 1: Code Correction

Problem Statement: You are given a piece of code that is intended to extract email addresses from a given text. 
However, the code contains errors and does not function as expected. Your task is to identify and correct these errors.

Code Example:

<span class="hljs-keyword">import</span> re

text = <span class="hljs-string">"Contact emails are: john.doe@example.com and jane.doe@example.com."</span>
emails = re.findall(<span class="hljs-string">r"[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,}"</span>, text)
<span class="hljs-built_in">print</span>(emails)
Expected Outcome:

Correct the regex pattern to capture email addresses effectively.
Modify the code to handle different cases in email addresses.
Task 2: Log File Analysis

Problem Statement: You have a log file represented as a string, containing timestamps and messages. 
Write a script to reformat the timestamps from 'MM-DD-YYYY' to 'YYYY-MM-DD' and anonymize any usernames 
mentioned in the log (format: '@username').

Code Example:

log_data = <span class="hljs-string">"12-25-2022: @john Logged in. 01-01-2023: @jane Accessed the dashboard."</span>
<span class="hljs-comment"># Your solution here</span>
Expected Outcome:

Correctly reformat the date in each log entry.
Replace all instances of '@username' with '[ANONYMIZED USER]'.
Use re.sub() effectively to achieve the desired text manipulations.


2. Python Regular Expressions Deep Dive
Objective:
The aim of this assignment is to deepen your practical skills in Python's regular expressions, enhancing your 
ability to process and manipulate text data. You will tackle a variety of real-world scenarios, applying regex to 
extract, validate, and transform text effectively.

Task 1: Email Extraction Enhancement

Problem Statement:
You have a script that extracts email addresses from a text but needs to be refined to exclude certain domains 
(e.g., 'exclude.com'). Modify the script to extract all email addresses except those from the specified domain.

Code Example:

import re

text = "Emails: user1@domain.com, user2@exclude.com, user3@domain.com"
emails = re.findall(r"\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Z|a-z]{2,}\b", text)
print(emails)
Expected Outcome:

Adapt the regex pattern to exclude email addresses from 'exclude.com'.
Ensure the script still extracts all other valid email addresses.


3. Advanced Text Processing with Python Regex
Objective:
The goal of this assignment is to harness the full potential of Python's Regular Expressions for advanced text processing. 
You'll tackle complex tasks involving data extraction, validation, and transformation, sharpening your skills in applying 
regex in various challenging scenarios.

Task 1: Advanced Data Extraction

Problem Statement:
Develop a script to extract specific information from a formatted text. The text contains data entries delimited by 
semicolons and formatted as 'Key: Value'. Extract the value corresponding to a specific key.

Code Example:

import re

text = "Name: John Doe; Age: 30; Occupation: Engineer; Location: New York"
# Extract the Occupation from the text
# Your code here
Expected Outcome:

Successfully extract the 'Occupation' value from the text.
Implement a regex pattern that accurately targets and captures the desired data.
Task 2: URL Validator

Problem Statement:
Write a Python program to validate a list of URLs. A valid URL should start with 'http://' or 'https://', followed by a domain name.

Code Example:

urls = ["https://example.com", "www.example.com", "http://test.com"]
# Validate each URL in the list
# Your code here
Expected Outcome:

Correctly identify and categorize valid and invalid URLs from the list.
Use regex to validate the format of each URL.


4. Python Regex Challenge: Enhancing E-Commerce Operations
Objective:

This assignment aims to refine your skills in using Python Regular Expressions to address common challenges 
in e-commerce operations. You will focus on tasks such as product categorization, customer review analysis, 
and data formatting, crucial for efficient e-commerce management.

Task 1: Product Description Keyword Tagging

Problem Statement:
You have a list of product descriptions. Your task is to tag each product based on keywords in the description. 
For instance, tag products as 'Electronics', 'Apparel', or 'Home & Kitchen' based on relevant keywords found in their descriptions.

Code Example:

descriptions = [
    "Smartphone with 6-inch screen and 128GB memory",
    "Cotton t-shirt in medium size",
    "Stainless steel kitchen knife set"
]
# Tag each product based on keywords in the description
# Your code here
Expected Outcome:

Efficiently tag each product with the appropriate category ('Electronics', 'Apparel', 'Home & Kitchen') using regex to 
identify relevant keywords.
Use regex to match specific product-related keywords in each description.
Task 2: Pricing Format Standardization

Problem Statement:
You have a string containing various price formats from an international e-commerce site. 
Standardize all prices to the format 'USD XX.XX', converting from formats like '$XX.XX', 'XX.XX USD', and 'XX.XX$'.

Code Example:

price_data = "Items cost $15.99, 20.00 USD, and 7.50$."
# Standardize all prices to 'USD XX.XX' format
# Your code here
Expected Outcome:

Convert all price formats in the string to a standardized 'USD XX.XX' format.
Use re.sub() to perform the necessary replacements and format transformations.